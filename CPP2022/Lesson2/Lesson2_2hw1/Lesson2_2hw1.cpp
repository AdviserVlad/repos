#include <iostream>
using namespace std;


const int ROW = 12;

// Пришлось почитать литературу, чтобы реализовать задумки:)
// Объявил пространство имён с переменными-масствами всех "кубиков", т.к. если объявить их внутри функции - они станут локальными и будут
// создаваться при каждом вызове функции, а потом, соответстенно каждый раз удаляться при выходе из неё (если конечно я правильно понял "механизм").
namespace dices
{
	string dice1[ROW] = {
		 "#########################",
		 "#########################",
		 "###                   ###",
		 "###                   ###",
		 "###                   ###",
		 "###        000        ###",
		 "###        000        ###",
		 "###                   ###",
		 "###                   ###",
		 "###                   ###",
		 "#########################",
		 "#########################",
	};
	string dice2[ROW] = {
		 "#########################",
		 "#########################",
		 "###                   ###",
		 "###    000            ###",
		 "###    000            ###",
		 "###                   ###",
		 "###                   ###",
		 "###            000    ###",
		 "###            000    ###",
		 "###                   ###",
		 "#########################",
		 "#########################",
	};
	string dice3[ROW] = {
		 "#########################",
		 "#########################",
		 "###                   ###",
		 "###   000             ###",
		 "###   000             ###",
		 "###        000        ###",
		 "###        000        ###",
		 "###             000   ###",
		 "###             000   ###",
		 "###                   ###",
		 "#########################",
		 "#########################",
	};
	string dice4[ROW] = {
		 "#########################",
		 "#########################",
		 "###                   ###",
		 "###    000     000    ###",
		 "###    000     000    ###",
		 "###                   ###",
		 "###                   ###",
		 "###    000     000    ###",
		 "###    000     000    ###",
		 "###                   ###",
		 "#########################",
		 "#########################",
	};
	string dice5[ROW] = {
		 "#########################",
		 "#########################",
		 "###                   ###",
		 "###   000       000   ###",
		 "###   000       000   ###",
		 "###        000        ###",
		 "###        000        ###",
		 "###   000       000   ###",
		 "###   000       000   ###",
		 "###                   ###",
		 "#########################",
		 "#########################",
	};
	string dice6[ROW] = {
		 "#########################",
		 "#########################",
		 "###                   ###",
		 "###   000  000  000   ###",
		 "###   000  000  000   ###",
		 "###                   ###",
		 "###                   ###",
		 "###   000  000  000   ###",
		 "###   000  000  000   ###",
		 "###                   ###",
		 "#########################",
		 "#########################"
	};
};

// Функция для реализации вывода кубиков на экран
string printDices(short drop, short i)
{
	switch (drop)
	{
	case(1): return dices::dice1[i];
	case(2): return dices::dice2[i];
	case(3): return dices::dice3[i];
	case(4): return dices::dice4[i];
	case(5): return dices::dice5[i];
	case(6): return dices::dice6[i];
	}
}

//Функция для вывода нужного нам ранга на экран
string printRang(short rang)
{
	switch (rang)
	{
	case(1): return "ЮНГА";
	case(2): return "МАТРОС";
	case(3): return "БОЦМАН";
	case(4): return "КВАРТИРМЕЙСТЕР";
	case(5): return "СТАРПОМ";
	case(6): return "ГРОЗА МОРЕЙ";
	}
}

int main()
{
	setlocale(LC_ALL, "RUS");
	srand(time(NULL));
	// Приветсвие игрока, небольшой "сюжет" при поддержке полёта фантазии:) + краткое описание правил игры.
	// Заключил в фигурные скобки, чтобы можно было свернуть, т.к. 90% кода - просто текст на вывод.

	{
		cout << "\t\t- - - - - - - - - - - Игра в кости (кубики) - - - - - - - - - - -\n\n\n" << endl;

		cout << "Вы заходите в знаменитый, хотя с виду и совсем не приметный, трактир.\n"
			"Едва Вы переступаете порог, как громкий голос трактирщика быстро разносится по всему залу:\n"
			"- А вот и он! Вот тот, кто поборется сегодня за звание ГРОЗЫ МОРЕЙ!\n\n"
			"- Приветствую тебя, морской волк и добро пожаловать в нашу таверну \"Мечта пирата\"!\n\n"
			"- Ну же, заходи! Заходи, присаживайся!...";
		getchar();

		cout << "\n- Ты даже не представляешь, насколько удачно ты зашёл!\n"
			"Ведь именно сегодня у нас проходит открытый турнир по игре в кости!\n"
			"Ты можешь побороться за звание ГРОЗЫ МОРЕЙ нашей таверны, а заодно и всего карибского побережья! ...";
		getchar();

		cout << "\n - Уууух, я уже вижу этот огонь азарта в твоих глазах! Даже не буду спрашивать, хочешь ты сыграть или нет,\n"
			"конечно, конечно я вижу, что ты будешь играть и настроен уйти победителем! ...";
		getchar();

		cout << "\nВ зал входит мужчина, одетый в тёмное кожаное пальто и такого же цвета огромную широкополую шляпу, украшенную страусовыми и фазановыми перьями.\n"
			"В без труда узнаёте его...";
		getchar();

		cout << "\nБарбосса...";
		getchar();

		cout << "\n- А вот и наш нынешний ЧЕМПИОН! Наш ГРОЗА МОРЕЙ! Непобедимый игрок в кости!\nКАПИТАН!\nБАРБОССА!";
		getchar();

		cout << "\nВы садитесь вдвоём за игровой стол. Барбосса достаёт игральные кости и указывает на слегка потрёпанный листок пергамента на стене:\n"
			"- Слушай внимательно, салага, повторять не буду.\n"
			"Есть шесть рангов - Юнга, Матрос, Боцман, Квартирмейстер, Старпом и Гроза морей.\n"
			"Всё просто: Кидаем два кубика. По очереди. Один кон - три броска. Кто выбросит большее общее число - тот и победитель.\n"
			"Выиграл кон - поднялся на ранг выше, проиграл - свалился на один ранг. Юнгой проиграл три раза подряд - игра окончена. Усёк? ...\n";
		getchar();
		cout << "Надеюсь, не нужно объяснять, какой у тебя ранг сейчас?\n"
			"Ну что, начнём, Юнга?! ХА-ХА-ХА\n\n";
		cout << "Фору новичкам, бросай первый ...";
		getchar();
		system("cls");
	}

	// Счётчик counter - для цикла
	// в conScores первая строка - результаты игрока, вторая - компьютера
	int counter = 0, conUserSum = 0, conCompSum = 0;
	short firstDice, secondDice, rang = 1, defeats = 0;
	int conScores[2][3];
	// Реализовал подтверждение продолжения игры на случай, если игроку надоест добираться до верхушки "пиратской карьерной лестницы":)
	char userChoice = 'y';

	cout << "Вы берёте кубики. Итак, игра началась!\n" << endl;

	while (1)
	{

		// Бросок игрока
		{
			cout << "Ваш ход!\n" << endl;
			firstDice = 1 + rand() % 6;
			secondDice = 1 + rand() % 6;
			conUserSum += conScores[0][counter] = firstDice + secondDice;
			getchar();

			for (int i = 0; i < ROW; i++)
			{
				cout << printDices(firstDice, i) << "\t\t" << printDices(secondDice, i) << endl;
			}

			if (conScores[0][counter] > 9)
			{
				cout << "\n\nОтличный бросок!" << endl;
			}
			else if (conScores[0][counter] < 5)
			{
				cout << "\n\nНе густо..." << endl;
			}
		}
		// Бросок компьютера
		{
			cout << "\n\nБарбосса берёт кости. Бросок...\n" << endl;
			firstDice = 1 + rand() % 6;
			secondDice = 1 + rand() % 6;
			conCompSum += conScores[1][counter] = firstDice + secondDice;
			getchar();

			for (int i = 0; i < ROW; i++)
			{
				cout << printDices(firstDice, i) << "\t\t" << printDices(secondDice, i) << endl;
			}
		}

		// Реакция компьютера на промежуточный результат
		cout << "\n\n" << conScores[0][counter] << " : " << conScores[1][counter] << endl;
		if (counter != 2 && conScores[0][counter] > conScores[1][counter])
		{
			cout << "\n\nНе обольщайся, бросай давай.\n" << endl;
		}
		else if (counter != 2 && conScores[0][counter] < conScores[1][counter])
		{
			cout << "\n\nХА! А шансов то на победу всё меньше, а? ;)\n" << endl;;
		}

		++counter;

		if (counter == 3)
		{
			counter = 0;

			// Выведем таблицу результатов в рамках одного кона:
			{
				cout << "\n\nКаждый сделал по три броска! Кон завершён. Сведём-ка данные кона в таблицу...\n\n";
				getchar();

				cout << "-----------------------------------------------------------------------------------------\n"
					"|\t  Очки\t\t|    Бросок1    |    Бросок2    |    Бросок3    |     Итого     |\n";
				for (int i = 0; i < 2; i++)
				{
					cout << "|-----------------------|---------------|---------------|---------------|---------------|\n";
					for (int j = 0; j < 3; j++)
					{
						if (i == 0 && j == 0)
						{
							cout << "|\t Игрок\t\t";
						}
						else if (i == 1 && j == 0)
						{
							cout << "|\tБарбосса\t";
						}
						cout << "|\t" << conScores[i][j] << "\t";
					}
					if (i == 0)
					{
						cout << "|\t" << conUserSum << "\t|" << endl;
					}
					if (i == 1)
					{
						cout << "|\t" << conCompSum << "\t|" << endl;
					}
				}
				cout << "-----------------------------------------------------------------------------------------\n";

				// Реакция компьютера на результат кона
				// Три варианта: ничья, проигрыш (если третий подряд Юнгой - игра окончена), выигрыш.
				// Ничья:
				if (conUserSum == conCompSum)
				{
					defeats = 0;
					cout << "\n\n- Ха! Смотри ка ты! Ничья!\n"
						<< "- Повезло тебе, " << printRang(rang) << "! Играем дальше? (Y/N): ";
				}
				// Выиграл компьютер:
				else if (conUserSum < conCompSum)
				{
					if (rang == 1)
					{
						++defeats;
						if (defeats == 3)
						{
							cout << "\n- Три поражения подряд будучи Юнгой? Такой соперник мне не интересен. Проваливай отсюда!\n" << endl;
							break;
						}
					}

					cout << "\n\n- Ха! Играть научись, " << printRang((rang == 1) ? 1 : (--rang)) << "!\nВсё ещё хочешь продолжить? (Y/N): ";
					cin >> userChoice;
					cin.clear();
					cin.sync();
				}
				// Выиграл игрок
				else
				{
					if (rang == 5)
					{
						cout << "\n\n- ДЬЯВОЛ! НЕ МОЖЕТ БЫТЬ! КАК?! КАК ТЫ УМУДРИЛСЯ ВЫИГРАТЬ?!?!?!?!\n" << endl;
						++rang;
						break;
					}
					cout << "\n\nЯкорь мне в глотку...победил таки...\n"
						"Ну ладно, давай продолжим, " << printRang(++rang) << ". (Y/N): ";
					cin >> userChoice;
					cin.clear();
					cin.sync();
				}
				conUserSum = conCompSum = 0;

				if (userChoice != 'y' && userChoice != 'Y')
				{
					cout << "\n- Струсил чтоли?! Ну и правильно, нечего моё время тратить!\n";
					break;
				}
			}


			getchar();
			system("cls");
		}

		// Если игрок добрался до "верхушки" - поздравляем его. Если нет, то просто сообщаем, что игра окончена.
		if (rang == 6)
		{
			cout << "\n\n- Прими наши поздравления! Теперь ТЫ гроза морей таверны \"Мечта пирата\", а заодно и всего карибского побережья!!!\n";

		}
		cout << "\n\nИгра окончена!\n\n";
	}
}