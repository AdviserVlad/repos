// NEW и DELETE 
// Динамическое выделение памяти
// указатель_на_тип_= new имя_типа (инициализатор)

#include <iostream>
#include <time.h>
#include <windows.h>

using namespace std;

int main()
{
    setlocale(LC_ALL, "rus");
    srand(time(NULL));

    cout << "---Работа с динамическим выделением памяти!---" << endl;
    int* ptr_X = new int; //Оператор new, запрашивает выделенеие памяти под
                          //тип данных int и адрес выделенной памяти помещает 
                          //в указатель ptr_X
    cout << ptr_X << endl;      //выводим адрес места в памяти
    cout << *ptr_X << endl;     //выводим значение, хранящееся в памяти
    
    double* ptr_PI = new double(3.14); //выделение памяти и её инициализация
    cout << ptr_PI << endl;     //выводим адрес места в памяти
    cout << *ptr_PI << endl;    //выводим значение, хранящееся в памяти

    double g = 9.8;
    ptr_PI = &g;
    cout << ptr_PI << endl;     //выводим адрес места в памяти
    cout << *ptr_PI << endl;    //выводим значение, хранящееся в памяти

    //динамическое выделение памяти по массив
    int* Array = new int[10]; //выделение памяти под масстив из 10 элементов типа данных int

    double* Massive = nullptr; //нулевой указатель на данные типа double    
    int Size;
    cout << "Введите размер массива! "; cin >> Size;
    Massive = new double[Size];//выделение динамической памяти под
    //массив из элементов типа double размером Size
    if (!Massive)  //необходимо проверить была ли выделена память 
    {
        cout << "ERROR: Ошибка выделения памяти!" << endl;
        exit(0); //функция выхода из программы
    }

    for (int i = 0; i < Size; i++)
    {
        Massive[i] = rand() % ((100 - (-100)) - 100) * 0.1;       //заполнение через индексы элементов
        //*(Massive+i)=rand()%((100-(-100))-100)*0.1;   //заполнение через указатель
        cout << "Massive[" << i << "]= " << *(Massive + i) << "; "; //выводим на экран значения через указатель
    }
    cout << endl;


    cout << "Освобождение памяти!" << endl;

    delete ptr_X;  //освобождение памяти, веделенной под переменную
    ptr_X = nullptr;

    int* Y = new int(157);
    cout << *Y << endl;
    delete Y;
    Y = nullptr;
    delete Y; //повторная попытка освободить память 
    //не приведет к ошибке, если указатель был обнулен

    //delete ptr_PI;  //ОШИБКА, указатель больше не указывает 
    //на динамически веделенную память

    delete[] Array; //освобождение памяти, выделенной под массив
    Array = nullptr;
    //освобождение памяти с проверкой:

    delete[] Massive;
    Massive = nullptr;
    
    if (Massive)
    {
        delete[] Massive;
        Massive = nullptr;
    }
    else cout << "Память уже была освобождена!" << endl;

}

//ПОДВЕДЕМ ИТОГ.Если вы выполнили динами -
//ческое выделение памяти через new, не забудьте
//освободить память через delete.